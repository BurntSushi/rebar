analysis = '''
These benchmarks test the functionality of `\b`. Essentially, we test whether
it is Unicode aware, whether it can be toggled and its specific semantics in
terms of how it defines what a "word" character actually is.

These tests pretty closely mirror the `word` benchmarks, but in the context of
using `\b` instead of `\w`.

These benchmarks aren't really intended to be used for collecting timing
measurements. These are just about verifying functionality.
'''

[[bench]]
model = "count"
name = "ascii-only"
regex = '\b'
haystack = 'δ'
count = [
  # .NET doesn't permit disabling the Unicode variant of \b.
  { engine = 'dotnet.*', count = 2 },
  # ICU doesn't permit disabling the Unicode variant of \b.
  { engine = 'icu', count = 2 },
  { engine = '.*', count = 0 },
]
engines = [
  'dotnet',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regex/lite',
]

[[bench]]
model = "count"
name = "unicode-alphabetic"
regex = '\b'
unicode = true
haystack = 'δ'
count = [
  # None of these regex engines support the Unicode variant of \b.
  { engine = 'go/regexp|javascript.*|re2|regress|rust/regex/lite', count = 0 },
  # This looks like a bug. Notably, pcre2/jit differs from it!
  { engine = 'pcre2', count = 1 },
  { engine = '.*', count = 2 },
]
engines = [
  'dotnet',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regex/lite',
]
analysis = '''
`hyperscan` doesn't support Unicode-aware `\b`.
'''

[[bench]]
model = "count"
name = "unicode-join-control"
regex = '\b'
unicode = true
haystack = "\u200D"
count = [
  # None of these regex engines support the Unicode variant of \b.
  { engine = 'go/regexp|javascript.*|re2|regress|rust/regex/lite', count = 0 },
  # None of these include \p{Join_Control} in their definition of \b.
  #
  # Notice that dotnet is not included here, despite the fact that
  # \p{Join_Control} is not part of the definition of \w!
  { engine = 'hyperscan|icu|pcre2.*|python/re', count = 0 },
  { engine = '.*', count = 2 },
]
engines = [
  'dotnet',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regex/lite',
]
analysis = '''
`hyperscan` doesn't support Unicode-aware `\b`.
'''

[[bench]]
model = "count"
name = "unicode-mark"
regex = '\b'
unicode = true
haystack = "\u0322"
count = [
  # None of these regex engines support the Unicode variant of \b.
  { engine = 'go/regexp|javascript.*|re2|regress|rust/regex/lite', count = 0 },
  # None of these include \p{gc=Mark} in their definition of \b.
  { engine = 'hyperscan|icu|pcre2.*|python/re', count = 0 },
  { engine = '.*', count = 2 },
]
engines = [
  'dotnet',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regex/lite',
]
analysis = '''
`hyperscan` doesn't support Unicode-aware `\b`.
'''

[[bench]]
model = "count"
name = "unicode-decimal-number"
regex = '\b'
unicode = true
haystack = '᠕'
count = [
  # None of these regex engines support the Unicode variant of \b.
  { engine = 'go/regexp|javascript.*|re2|regress|rust/regex/lite', count = 0 },
  # This looks like a bug. Notably, pcre2/jit differs from it!
  { engine = 'pcre2', count = 1 },
  { engine = '.*', count = 2 },
]
engines = [
  'dotnet',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regex/lite',
]
analysis = '''
`hyperscan` doesn't support Unicode-aware `\b`.
'''

[[bench]]
model = "count"
name = "unicode-connector-punctuation"
regex = '\b'
unicode = true
haystack = '⁀'
count = [
  # None of these regex engines support the Unicode variant of \b.
  { engine = 'go/regexp|javascript.*|re2|regress|rust/regex/lite', count = 0 },
  # None of these include \p{gc=Connector_Punctuation} in their definition
  # of \b, although, they all at least include `_`, which is part of
  # `Connector_Punctuation`.
  { engine = 'hyperscan|pcre2.*|python/re', count = 0 },
  { engine = '.*', count = 2 },
]
engines = [
  'dotnet',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regex/lite',
]
analysis = '''
`hyperscan` doesn't support Unicode-aware `\b`.
'''
