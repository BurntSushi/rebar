analysis = '''
This benchmark seems to have originated from John Maddock as part of measuring
the performance of [boost's regex engine][maddock-bench]. It was then [adapted
by Zoltan Herczeg][herczeg-bench] to benchmark [sljit], the JIT backend for
PCRE and PCRE2. The benchmark was then further adapted by the [Rust Leipzig
User Group][leipzig-bench]. The last iteration is the one we use here.

As alluded to in the benchmark methodology, and as demonstrated in the [Leipzig
runner program][leipzig-runner], the benchmark is of the "find all matches"
variety. That is, it is not line oriented. It loads the entire haystack into
memory and then finds all matches.

As appears to be a pattern in regex benchmarks, this one also does not compare
apples-to-apples. It goes out of its way, for example, to [disable Unicode
mode for RE2][re2-disable-unicode], but [does not do the same for the regex
crate][rustregex-enable-unicode]. PCRE2 also has Unicode mode disabled (which
is the default). Anyway, we disable Unicode for almost all benchmarks, since
this is a predominantly ASCII benchmark. There are a couple benchmarks that
make use of Unicode features, and for those, we enable Unicode for all regex
engines.

[maddock-bench]: https://www.boost.org/doc/libs/1_41_0/libs/regex/doc/gcc-performance.html
[herczeg-bench]: https://zherczeg.github.io/sljit/regex_perf.html
[sljit]: https://github.com/zherczeg/sljit/
[leipzig-bench]: https://github.com/rust-leipzig/regex-performance
[leipzig-runner]: https://github.com/rust-leipzig/regex-performance/blob/52cb0538eca86ad549f6895dbfa9a2f71bc82244/src/main.c
[re2-disable-unicode]: https://github.com/rust-leipzig/regex-performance/blob/52cb0538eca86ad549f6895dbfa9a2f71bc82244/src/re2.cpp#L13
[rustregex-enable-unicode]: https://github.com/rust-leipzig/regex-performance/blob/52cb0538eca86ad549f6895dbfa9a2f71bc82244/src/rust/src/lib.rs#L17-L20
'''

[[bench]]
model = "count"
name = "twain"
regex = 'Twain'
haystack = { path = "imported/leipzig-3200.txt" }
count = 811
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "twain-insensitive"
regex = 'Twain'
case-insensitive = true
haystack = { path = "imported/leipzig-3200.txt" }
count = 965
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "shing"
regex = '[a-z]shing'
haystack = { path = "imported/leipzig-3200.txt" }
count = 1540
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "huck-saw"
regex = 'Huck[a-zA-Z]+|Saw[a-zA-Z]+'
haystack = { path = "imported/leipzig-3200.txt" }
count = [
  { engine = 'hyperscan', count = 977 },
  { engine = '.*', count = 262 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "word-ending-nn"
regex = '\b\w+nn\b'
haystack = { path = "imported/leipzig-3200.txt" }
count = 262
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "certain-long-strings-ending-x"
regex = '[a-q][^u-z]{13}x'
haystack = { path = "imported/leipzig-3200.txt" }
count = 4094
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "tom-sawyer-huckle-finn"
regex = 'Tom|Sawyer|Huckleberry|Finn'
haystack = { path = "imported/leipzig-3200.txt" }
count = 2598
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "tom-sawyer-huckle-fin-insensitive"
regex = 'Tom|Sawyer|Huckleberry|Finn'
case-insensitive = true
haystack = { path = "imported/leipzig-3200.txt" }
count = 4152
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "tom-sawyer-huckle-fin-prefix-short"
regex = '.{0,2}(Tom|Sawyer|Huckleberry|Finn)'
haystack = { path = "imported/leipzig-3200.txt" }
count = 2598
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
analysis = '''
* `nim/nitely-regex` is omitted because it times out.
'''

[[bench]]
model = "count"
name = "tom-sawyer-huckle-fin-prefix-long"
regex = '.{2,4}(Tom|Sawyer|Huckleberry|Finn)'
haystack = { path = "imported/leipzig-3200.txt" }
count = [
  { engine = 'hyperscan', count = 2128 },
  { engine = '.*', count = 1976 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
analysis = '''
* `nim/nitely-regex` is omitted because it times out.
'''

[[bench]]
model = "count"
name = "tom-river"
regex = 'Tom.{10,25}river|river.{10,25}Tom'
haystack = { path = "imported/leipzig-3200.txt" }
count = 2
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "ing"
regex = '[a-zA-Z]+ing'
haystack = { path = "imported/leipzig-3200.txt" }
count = [
  { engine = 'hyperscan', count = 78_872 },
  { engine = '.*', count = 78_424 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "ing-whitespace"
regex = '\s[a-zA-Z]{0,12}ing\s'
haystack = { path = "imported/leipzig-3200.txt" }
count = [
  { engine = 'hyperscan', count = 55_640 },
  { engine = '.*', count = 55_248 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
analysis = '''
* `nim/nitely-regex` is omitted because it times out.
'''

[[bench]]
model = "count"
name = "awyer-inn"
regex = '([A-Za-z]awyer|[A-Za-z]inn)\s'
haystack = { path = "imported/leipzig-3200.txt" }
count = 209
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "quotes-bounded"
regex = '''["'][^"']{0,30}[?!\.]["']'''
haystack = { path = "imported/leipzig-3200.txt" }
count = [
  { engine = 'hyperscan', count = 8_898 },
  { engine = '.*', count = 8_886 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
analysis = '''
* `nim/nitely-regex` is omitted because it times out.
'''

[[bench]]
model = "count"
name = "non-ascii-alternate"
regex = '∞|✓'
haystack = { path = "imported/leipzig-3200.txt" }
unicode = true
count = 2
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "math-symbols"
regex = '\p{Sm}'
haystack = { path = "imported/leipzig-3200.txt" }
unicode = true
count = 69
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
analysis = '''
* `python/re` doesn't support `\p{Sm}`.
'''

[[bench]]
model = "count-spans"
name = "bounded-strings-ending-z"
regex = '(.*?,){13}z'
haystack = { path = "imported/leipzig-3200.txt" }
count = 0
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  # 'icu', # timeout
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
