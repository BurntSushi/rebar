analysis = '''
This group of benchmarks was imported from
[mariomka's regex benchmark][mariomka].

The benchmark metholodgy section for this benchmark is extremely sparse, but
after looking at [some example programs][mariomka-example], it's clear that
it slurps up the entire haystack and just finds all matches. That is, this is
*not* a line oriented benchmark.

The benchmark *also* includes the compile times of regexes. But... it uses
a haystack that is so small that the compile times can actually have a
measurable impact on the final results. The benchmark makes an attempt to
control for this by providing an "optimized" version, which would be better
called "where we compare apples to apples."

Anyway, in this benchmark suite, we separate compile time from search
time. And here, we only measure search time, so it is not quite a precise
reproduction of mariomka's benchmark.

Another difference from mariomka's benchmark is that we try to control for
equivalent functionality between regex engines, instead of comparing apples
with oranges. For example, we don't let one regex engine run with Unicode
enabled and another run without it enabled.

[mariomka]: https://github.com/mariomka/regex-benchmark
[mariomka-example]: https://github.com/mariomka/regex-benchmark/blob/17d073ec864931546e2694783f6231e4696a9ed4/rust/src/main.rs
'''

[[bench]]
model = "count"
name = "email"
regex = '[\w\.+-]+@[\w\.-]+\.[\w\.-]+'
haystack = { path = "imported/mariomka.txt" }
count = [
  { engine = 'hyperscan', count = 351 },
  { engine = '.*', count = 92 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "uri"
regex = '[\w]+://[^/\s?#]+[^\s?#]+(?:\?[^\s#]*)?(?:#[^\s]*)?'
haystack = { path = "imported/mariomka.txt" }
count = [
  { engine = 'hyperscan', count = 171_720 },
  { engine = '.*', count = 5301 },
]
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]

[[bench]]
model = "count"
name = "ip"
regex = '(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])'
haystack = { path = "imported/mariomka.txt" }
count = 5
engines = [
  'd/dmd/std-regex',
  'd/ldc/std-regex',
  'dotnet/compiled',
  'dotnet/nobacktrack',
  'go/regexp',
  'hyperscan',
  'icu',
  'java/hotspot',
  'javascript/v8',
  'nim/nitely-regex',
  'pcre2',
  'pcre2/jit',
  'perl',
  'python/re',
  'python/regex',
  're2',
  'regress',
  'rust/regex',
  'rust/regexold',
]
