# These benchmarks primarily come from Russ Cox's RE2 and Go regexp
# libraries[1]. They were originally included as "misc" benchmarks in the regex
# crate[2] before being ported here.
#
# There are likely some small changes and a few benchmarks that I've added, but
# they should be largely the same. Many of them (like 'easy1') are somewhat
# "broken" in that they are anchored at the end as a way of ensuring the regex
# engine scans through the entire haystack. But at some point, the regex crate
# (and also RE2) got an optimization that does a reverse scan when the regex
# is anchored at the end, which somewhat made the point of those benchmarks
# somewhat moot. Instead of reconceptualizing them, we retain them as-is.
#
# [1]: https://github.com/golang/go/blob/5724daa6825db0a9097254060633439e6538d845/src/regexp/all_test.go#L666
# [2]: https://github.com/rust-lang/regex/blob/a9b2e02352db92ce1f6e5b7ecd41b8bbffbe161a/bench/src/misc.rs

[[bench]]
model = "count-spans"
name = "no-exponential"
regex = '(a+)*[b-z]'
# Do not increase this haystack size much more, as it will greatly slow down
# the backtrackers.
haystack = 'aaaaaaaaaaaaaaaaaaaaaaaaa'
count = 0
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "literal"
regex = 'y'
haystack = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxy'
count = 1
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "not-literal"
regex = '.y'
haystack = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxy'
count = 2
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "match-class"
regex = '[abcdw]'
haystack = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxw'
count = 1
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "match-class-in-range"
regex = '[ac]'
haystack = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc'
count = 1
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "match-class-unicode"
regex = '\pL'
haystack = '☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5☃5a'
unicode = true
count = 1
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "anchored-literal-short-non-match"
regex = '^zbc(d|e)'
haystack = 'abcdefghijklmnopqrstuvwxyz'
count = 0
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "anchored-literal-long-non-match"
regex = '^zbc(d|e)'
haystack = { path = "imported/rsc/anchored-literal-long.txt" }
count = 0
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "anchored-literal-short-match"
regex = '^.bc(d|e)'
haystack = 'abcdefghijklmnopqrstuvwxyz'
count = 4
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "anchored-literal-long-match"
regex = '^.bc(d|e)'
haystack = { path = "imported/rsc/anchored-literal-long.txt" }
count = 4
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "one-pass-short"
regex = '^.bc(d|e)*$'
haystack = 'abcddddddeeeededd'
count = 17
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "one-pass-short-not"
regex = '.bc(d|e)*$'
haystack = 'abcddddddeeeededd'
count = 17
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "one-pass-long-prefix"
regex = '^abcdefghijklmnopqrstuvwxyz.*$'
haystack = 'abcdefghijklmnopqrstuvwxyz'
count = 26
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "one-pass-long-prefix-not"
regex = '^.bcdefghijklmnopqrstuvwxyz.*$'
haystack = 'abcdefghijklmnopqrstuvwxyz'
count = 26
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "long-needle1"
regex = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaab'
haystack = { path = "imported/rsc/long-needle1.txt" }
count = 31
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "long-needle2"
regex = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbba'
haystack = { path = "imported/rsc/long-needle2.txt" }
count = 31
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy0-32"
regex = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 26
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy0-1k"
regex = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 26
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy0-32k"
regex = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 26
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy0-1mb"
regex = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 26
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy1-32"
regex = 'A[AB]B[BC]C[CD]D[DE]E[EF]F[FG]G[GH]H[HI]I[IJ]J$'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "AABCCCDEEEFGGHHHIJJ" }
count = 19
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy1-1k"
regex = 'A[AB]B[BC]C[CD]D[DE]E[EF]F[FG]G[GH]H[HI]I[IJ]J$'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "AABCCCDEEEFGGHHHIJJ" }
count = 19
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy1-32k"
regex = 'A[AB]B[BC]C[CD]D[DE]E[EF]F[FG]G[GH]H[HI]I[IJ]J$'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "AABCCCDEEEFGGHHHIJJ" }
count = 19
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "easy1-1mb"
regex = 'A[AB]B[BC]C[CD]D[DE]E[EF]F[FG]G[GH]H[HI]I[IJ]J$'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "AABCCCDEEEFGGHHHIJJ" }
count = 19
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "medium-32"
regex = '[XYZ]ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "XABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "medium-1k"
regex = '[XYZ]ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "XABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "medium-32k"
regex = '[XYZ]ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "XABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "medium-1mb"
regex = '[XYZ]ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "XABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "hard-32"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 58
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "hard-1k"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "hard-32k"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "hard-1mb"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ$'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 51
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyhard0-32"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ.*'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 58
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyhard0-1k"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ.*'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyhard0-32k"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ.*'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 27
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyhard0-1mb"
regex = '[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ.*'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }
count = 51
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyhard0-32"
regex = '\w+\s+Holmes'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "Sherlock Holmes" }
count = 47
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyhard0-1k"
regex = '\w+\s+Holmes'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "Sherlock Holmes" }
count = 16
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyhard0-32k"
regex = '\w+\s+Holmes'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "Sherlock Holmes" }
count = 16
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyhard0-1mb"
regex = '\w+\s+Holmes'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "Sherlock Holmes" }
count = 40
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyreallyhard0-32"
regex = '\w+\s+Holmes\s+\w+'
haystack = { path = "imported/rsc/32.txt", trim = true, append = "Sherlock Holmes wat" }
count = 51
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyreallyhard0-1k"
regex = '\w+\s+Holmes\s+\w+'
haystack = { path = "imported/rsc/1K.txt", trim = true, append = "Sherlock Holmes wat" }
count = 20
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyreallyhard0-32k"
regex = '\w+\s+Holmes\s+\w+'
haystack = { path = "imported/rsc/32K.txt", trim = true, append = "Sherlock Holmes wat" }
count = 20
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "reallyreallyreallyhard0-1mb"
regex = '\w+\s+Holmes\s+\w+'
haystack = { path = "imported/rsc/1MB.txt", trim = true, append = "Sherlock Holmes wat" }
count = 44
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]
