# These benchmarks were imported from the old regex crate's benchmark suite[1].
# There were loosely inspired by the leipzig benchmark, but I added to it
# quite a bit over time to test various optimizations I had added to the regex
# crate. I've ported them over to this harness as a way of doing a direct
# comparison between this benchmarking tool and the older suite. The benchmarks
# themselves are also generally useful, but do have a lot of overlap with other
# benchmarks.
#
# [1]: https://github.com/rust-lang/regex/blob/a9b2e02352db92ce1f6e5b7ecd41b8bbffbe161a/bench/src/sherlock.rs

[[bench]]
model = "count-spans"
name = "name-sherlock"
regex = 'Sherlock'
haystack = { path = "sherlock.txt" }
count = 776
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'rust/memchr/memmem',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-holmes"
regex = 'Holmes'
haystack = { path = "sherlock.txt" }
count = 2766
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  'rust/memchr/memmem',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-sherlock-holmes"
regex = 'Sherlock Holmes'
haystack = { path = "sherlock.txt" }
count = 1365
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'rust/memchr/memmem',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-sherlock-casei"
regex = 'Sherlock'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 816
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-holmes-casei"
regex = 'Holmes'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 2802
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-sherlock-holmes-casei"
regex = 'Sherlock Holmes'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 1440
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-whitespace"
regex = 'Sherlock\s+Holmes'
haystack = { path = "sherlock.txt" }
case-insensitive = false
count = 1461
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt1"
regex = 'Sherlock|Street'
haystack = { path = "sherlock.txt" }
count = 1142
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt2"
regex = 'Sherlock|Holmes'
haystack = { path = "sherlock.txt" }
count = 3542
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt3"
regex = 'Sherlock|Holmes|Watson|Irene|Adler|John|Baker'
haystack = { path = "sherlock.txt" }
count = 4507
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt3-casei"
regex = 'Sherlock|Holmes|Watson|Irene|Adler|John|Baker'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 4593
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt4"
regex = 'Sher[a-z]+|Hol[a-z]+'
haystack = { path = "sherlock.txt" }
count = 3686
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt4-casei"
regex = 'Sher[a-z]+|Hol[a-z]+'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 4254
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt5"
regex = 'Sherlock|Holmes|Watson'
haystack = { path = "sherlock.txt" }
count = 4028
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "name-alt5-casei"
regex = 'Sherlock|Holmes|Watson'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 4104
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "no-match-uncommon"
regex = 'zqj'
haystack = { path = "sherlock.txt" }
count = 0
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "no-match-common"
regex = 'aqj'
haystack = { path = "sherlock.txt" }
count = 0
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "no-match-really-common"
regex = 'aei'
haystack = { path = "sherlock.txt" }
count = 0
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "the-lower"
regex = 'the'
haystack = { path = "sherlock.txt" }
count = 21654
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'rust/memchr/memmem',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "the-upper"
regex = 'The'
haystack = { path = "sherlock.txt" }
count = 2223
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'rust/memchr/memmem',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "the-casei"
regex = 'the'
haystack = { path = "sherlock.txt" }
case-insensitive = true
count = 23961
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

# See everything-greedy-nl.
[[bench]]
model = "count-spans"
name = "everything-greedy"
regex = '.*'
haystack = { path = "sherlock.txt" }
unicode = true
count = [
  # Not sure what's going on with regress here.
  { engine = 'regress', count = 568_829 },
  { engine = '.*', count = 581_881 },
]
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

# This benchmark demonstrates the impact of not having a fast path when a DFA
# enters a match state. Namely, in this regex, the DFA is always in a match
# state, and thus its inner loop constantly gets dropped into handling the
# "special state" for every byte of input. This quite drastically impacts perf.
#
# In the old lazy DFA, we had a special optimization to handle this: once the
# DFA enters a match state, we enter a special loop that keeps going so long as
# the DFA is in a match state.
#
# It *might* be worth adding that optimization back in, but I don't think it's
# worth doing for a benchmark like this. This particular benchmark is pretty
# pathological as it just matches everything it can.
#
# (This also applies to 'everything-greedy', but to a lesser extent.)
[[bench]]
model = "count-spans"
name = "everything-greedy-nl"
regex = '(?s).*'
haystack = { path = "sherlock.txt" }
unicode = true
count = 594_933
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "letters"
regex = '\pL'
haystack = { path = "sherlock.txt" }
unicode = true
count = 447_175
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  # 'pcre2', # timeout, why?
  'pcre2/jit',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "letters-upper"
regex = '\p{Lu}'
haystack = { path = "sherlock.txt" }
unicode = true
count = 14_180
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "letters-lower"
regex = '\p{Ll}'
haystack = { path = "sherlock.txt" }
unicode = true
count = 432_995
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  # 'pcre2', # timeout, why?
  'pcre2/jit',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "words"
regex = '\w+'
haystack = { path = "sherlock.txt" }
count = 447_639
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "before-holmes"
regex = '\w+\s+Holmes'
haystack = { path = "sherlock.txt" }
count = 4073
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "before-after-holmes"
regex = '\w+\s+Holmes\s+\w+'
haystack = { path = "sherlock.txt" }
count = 2593
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "holmes-cochar-watson"
regex = 'Holmes.{0,25}Watson|Watson.{0,25}Holmes'
haystack = { path = "sherlock.txt" }
count = 150
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "holmes-coword-watson"
regex = 'Holmes(?:\s*.+\s*){0,10}Watson|Watson(?:\s*.+\s*){0,10}Holmes'
haystack = { path = "sherlock.txt" }
count = 14_309
engines = [
  'rust/regex/meta',
  'rust/regexold',
  # 'regress', # timeout
  're2',
  'go/regexp',
]

[[bench]]
model = "count-spans"
name = "quotes"
regex = '''["'][^"']{0,30}[?!.]["']'''
haystack = { path = "sherlock.txt" }
count = 14_437
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "line-boundary-sherlock-holmes"
regex = '(?m)^Sherlock Holmes|Sherlock Holmes$'
haystack = { path = "sherlock.txt" }
count = 510
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "word-ending-n"
regex = '\b\w+n\b'
haystack = { path = "sherlock.txt" }
count = 35_297
engines = [
  'rust/regex/meta',
  'rust/regexold',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "repeated-class-negation"
regex = '[a-q][^u-z]{13}x'
haystack = { path = "sherlock.txt" }
count = 2130
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "ing-suffix"
regex = '[a-zA-Z]+ing'
haystack = { path = "sherlock.txt" }
count = 20_547
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]

[[bench]]
model = "count-spans"
name = "ing-suffix-limited-space"
regex = '\s[a-zA-Z]{0,12}ing\s'
haystack = { path = "sherlock.txt" }
count = 19_658
engines = [
  'rust/regex/meta',
  'rust/regexold',
  'regress',
  're2',
  'go/regexp',
  'pcre2',
  'pcre2/jit',
  'python/re',
  'python/regex',
]
