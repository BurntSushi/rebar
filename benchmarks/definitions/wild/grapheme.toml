analysis = '''
At time of writing, the Rust [`bstr` crate uses a regex for finding
graphemes][bstr-regex-grapheme] and builds a full DFA from it. Someone might
also conceivably use this with the regex crate, so we benchmark its compilation
and search time.

[bstr-regex-grapheme]: https://github.com/BurntSushi/bstr/blob/65993b58be1547bfc0de9ad8c1c8f3d3fcb0a32f/scripts/regex/grapheme.sh
'''

[[bench]]
model = "compile"
name = "compile"
regex = { path = "wild/grapheme.txt" }
haystack = "a\u0300\u0316\U0001F1FA\U0001F1F8"
unicode = true
count = 2
engines = [
  'rust/regex',
  'rust/regex/dense',
  'rust/regex/ast',
  'rust/regex/hir',
  'rust/regex/nfa',
  'rust/regexold',
  'python/regex',
]

[[bench]]
model = "count"
name = "source-code"
regex = { path = "wild/grapheme.txt" }
haystack = { path = "rust-src-tools-3b0d4813.txt" }
unicode = true
count = [
  # Maybe a different version of Unicode?
  { engine = 'python/regex', count = 6_832_947 },
  { engine = '.*', count = 7_382_210 },
]
engines = [
  'rust/regex',
  'rust/regex/dense',
  'rust/regex/hybrid',
  'rust/regexold',
  'python/regex',
]

[[bench]]
model = "count"
name = "codepoints"
regex = { path = "wild/grapheme.txt" }
haystack = { path = "unicode/allcodepoints.txt" }
unicode = true
count = 1109158
engines = [
  'rust/regex',
  'rust/regex/dense',
  'rust/regex/hybrid',
  'rust/regex/pikevm',
  'rust/regexold',
  'python/regex',
]
analysis = '''
This looks for graphemes in a file that contains a sequence of all codepoints.
This is somewhat pathological, but it pushes the regex engines inside the regex
crate to their limit, especially the lazy DFA, because it forces the transition
table to get substantially filled out.
'''
